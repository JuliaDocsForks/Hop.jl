{
    "docs": [
        {
            "location": "/", 
            "text": "Hop.jl Documentation\n\n\n#\n\n\nHop.TightBindingModel\n \n \nType\n.\n\n\nA tight binding model.\n\n\nGenerally, every tight binding model is three dimensional. Thus every lattice vector should have three components. Lower dimensional models should be simulated by vacuum layer.\n\n\nConstructor Arguments\n\n\n\n\nlat::Matrix{Float64}\n: lattice vector. Lattice vectors should be provided in columns`\n\n\npositions::Matrix{Float64}\n: atom positions in relative coordinate. Atom positions should be provided in columns`\n\n\n\n\nFields\n\n\n\n\nnorbits::Int\n: number of orbits.\n\n\nlat::Matrix{Float64}\n: lattice vectors stored in columns.\n\n\nrlat::Matrix{Float64}\n: reciprocal lattice vectors stored in columns.\n\n\npositions::Matrix{Float64}\n: position of orbits in relative coordinate stored in columns.\n\n\nhoppings::Dict{Vector{Int64}, Complex128}\n: hoppings.  Hopping example: [1, 1, 1, 0, 0] =\n 1.0+0.0im indicates hopping from orbit 1  in unit cell labeled by (1, 0, 0) to orbit 1 in home unit cell is 1.0.\n\n\n\n\nsource\n\n\n#\n\n\nHop.sethopping!\n \n \nFunction\n.\n\n\nSet hoppings for a TightBindingModel t. Hoppings are expressed as \u27e80n|H|Rm\u27e9, where R is a 3-element Vector{Int} representing lattice vector. Hamiltonian is guaranteed to be Hermitian.\n\n\nArguments\n\n\n\n\nt::TightBindingModel\n: a TightBindingModel.\n\n\nn::Int\n and \nm::Int\n: label of orbits in \u27e80n|H|Rm\u27e9.\n\n\nR::Vector{Int}\n: label of unit cell in \u27e80n|H|Rm\u27e9.\n\n\nhopping::Number\n: value of \u27e80n|H|Rm\u27e9.\n\n\n\n\nsource\n\n\n#\n\n\nHop.addmagneticfield!\n \n \nFunction\n.\n\n\nAdd constant magnetic field in z direction for a TightBindingModel.\n\n\nArguments\n\n\n\n\nt::TightBindingModel\n: a TightBindingModel.\n\n\nB::Float64\n: magnetic field in z direction. B is actually Be/h, thus its unit is 1/[length]^2. e here is fundamental charge. Since electron charge is -e, positive B means -z direction for electron system.\n\n\n\n\nsource\n\n\n#\n\n\nHop.makesupercell\n \n \nFunction\n.\n\n\nCreate a supercell TightBindingModel from original TightBindingModel.\n\n\nArguments\n\n\n\n\nt::TightBindingModel\n: the original TightBindingModel.\n\n\nncells::Vector{Int}\n: a 3-element vector representing number of unit cells in three spatial directions.\n\n\n\n\nReturn\n\n\na TightBindingModel.\n\n\nsource\n\n\n#\n\n\nHop.makecluster\n \n \nFunction\n.\n\n\nCreate cluster by cutting off all hoppings between cells.\n\n\nArguments\n\n\n\n\nt::TightBindingModel\n: a TightBindingModel.\n\n\n\n\nReturn\n\n\na TightBindingModel.\n\n\nsource\n\n\n#\n\n\nHop.calhamiltonian\n \n \nFunction\n.\n\n\nCalculate Hamiltonian of a TightBindingModel t for a specific k point.\n\n\nArguments\n\n\n\n\nt::TightBindingModel\n:: a TightBindingModel.\n\n\nk::Vector{Float}\n: k point in relative coordinate.\n\n\n\n\nReturn\n\n\nH(k)::Matrix{Complex128}\n.\n\n\nsource\n\n\n#\n\n\nHop.caleig\n \n \nFunction\n.\n\n\nCalculate eigenvalue and eigenvectors of a TightBindingModel t for a specific k point.\n\n\nArguments\n\n\n\n\nt::TightBindingModel\n:: a TightBindingModel.\n\n\nk::Vector{Float}\n: k point in relative coordinate.\n\n\ncalegvecs::Bool\n: whether calculate eigenvectors or not. Default to false.\n\n\n\n\nreturn\n\n\nIf calegvecs is true, \n(egvals::Vector{Float64}, egvecs::Matrix{Complex128})\n, otherwise just \negvals::Vector{Float64}\n. Eigenvectors are stored in columns and eigenvalues are sorted from small to large.\n\n\nsource", 
            "title": "API reference"
        }, 
        {
            "location": "/#hopjl-documentation", 
            "text": "#  Hop.TightBindingModel     Type .  A tight binding model.  Generally, every tight binding model is three dimensional. Thus every lattice vector should have three components. Lower dimensional models should be simulated by vacuum layer.  Constructor Arguments   lat::Matrix{Float64} : lattice vector. Lattice vectors should be provided in columns`  positions::Matrix{Float64} : atom positions in relative coordinate. Atom positions should be provided in columns`   Fields   norbits::Int : number of orbits.  lat::Matrix{Float64} : lattice vectors stored in columns.  rlat::Matrix{Float64} : reciprocal lattice vectors stored in columns.  positions::Matrix{Float64} : position of orbits in relative coordinate stored in columns.  hoppings::Dict{Vector{Int64}, Complex128} : hoppings.  Hopping example: [1, 1, 1, 0, 0] =  1.0+0.0im indicates hopping from orbit 1  in unit cell labeled by (1, 0, 0) to orbit 1 in home unit cell is 1.0.   source  #  Hop.sethopping!     Function .  Set hoppings for a TightBindingModel t. Hoppings are expressed as \u27e80n|H|Rm\u27e9, where R is a 3-element Vector{Int} representing lattice vector. Hamiltonian is guaranteed to be Hermitian.  Arguments   t::TightBindingModel : a TightBindingModel.  n::Int  and  m::Int : label of orbits in \u27e80n|H|Rm\u27e9.  R::Vector{Int} : label of unit cell in \u27e80n|H|Rm\u27e9.  hopping::Number : value of \u27e80n|H|Rm\u27e9.   source  #  Hop.addmagneticfield!     Function .  Add constant magnetic field in z direction for a TightBindingModel.  Arguments   t::TightBindingModel : a TightBindingModel.  B::Float64 : magnetic field in z direction. B is actually Be/h, thus its unit is 1/[length]^2. e here is fundamental charge. Since electron charge is -e, positive B means -z direction for electron system.   source  #  Hop.makesupercell     Function .  Create a supercell TightBindingModel from original TightBindingModel.  Arguments   t::TightBindingModel : the original TightBindingModel.  ncells::Vector{Int} : a 3-element vector representing number of unit cells in three spatial directions.   Return  a TightBindingModel.  source  #  Hop.makecluster     Function .  Create cluster by cutting off all hoppings between cells.  Arguments   t::TightBindingModel : a TightBindingModel.   Return  a TightBindingModel.  source  #  Hop.calhamiltonian     Function .  Calculate Hamiltonian of a TightBindingModel t for a specific k point.  Arguments   t::TightBindingModel :: a TightBindingModel.  k::Vector{Float} : k point in relative coordinate.   Return  H(k)::Matrix{Complex128} .  source  #  Hop.caleig     Function .  Calculate eigenvalue and eigenvectors of a TightBindingModel t for a specific k point.  Arguments   t::TightBindingModel :: a TightBindingModel.  k::Vector{Float} : k point in relative coordinate.  calegvecs::Bool : whether calculate eigenvectors or not. Default to false.   return  If calegvecs is true,  (egvals::Vector{Float64}, egvecs::Matrix{Complex128}) , otherwise just  egvals::Vector{Float64} . Eigenvectors are stored in columns and eigenvalues are sorted from small to large.  source", 
            "title": "Hop.jl Documentation"
        }
    ]
}