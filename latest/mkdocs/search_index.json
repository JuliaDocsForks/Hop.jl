{
    "docs": [
        {
            "location": "/", 
            "text": "Hop.jl Documentation\n\n\n#\n\n\nHop.TightBindingModel\n \n \nType\n.\n\n\nA tight binding model.\n\n\nGenerally, every tight binding model is three dimensional. Thus every lattice vector should have three components. Lower dimensional models should be simulated by vacuum layer.\n\n\nConstructor Arguments\n\n\n\n\nlat::Matrix{Float64}\n: lattice vector. Lattice vectors should be provided in columns.`\n\n\npositions::Matrix{Float64}\n: atom positions in reduced coordinate. Atom positions should be provided in columns.`\n\n\n\n\nFields\n\n\n\n\nnorbits::Int\n: number of orbits.\n\n\nlat::Matrix{Float64}\n: lattice vectors stored in columns.\n\n\nrlat::Matrix{Float64}\n: reciprocal lattice vectors stored in columns.\n\n\npositions::Matrix{Float64}\n: position of orbits in reduced coordinate stored in columns.\n\n\nhoppings::Dict{Tuple{Int64,Int64,Array{Int64,1}}, Complex128}\n: hoppings.  Hopping example: (1, 1, [1, 0, 0]) =\n 1.0+0.0im indicates hopping from orbit 1  in unit cell labeled by [1, 0, 0] to orbit 1 in home unit cell is 1.0.\n\n\n\n\nsource\n\n\n#\n\n\nHop.sethopping!\n \n \nFunction\n.\n\n\nsethopping!(t::TightBindingModel, n::Int64, m::Int64, R::Vector{Int64}, hopping::Number)\n\n\n\n\nSet hoppings for a TightBindingModel t. Hoppings are labeled as \u27e80n|H|Rm\u27e9, where R is a 3-element Vector{Int} representing lattice vector. Hamiltonian is guaranteed to be Hermitian.\n\n\nsource\n\n\n#\n\n\nHop.calhamiltonian\n \n \nFunction\n.\n\n\ncalhamiltonian(t::TightBindingModel, k::Vector{\n:Real})--\nMatrix{Complex128}\n\n\n\n\nCalculate Hamiltonian of a TightBindingModel t for a specific k point. k should be provided in reduced coordinate.\n\n\nsource\n\n\n#\n\n\nHop.caleig\n \n \nFunction\n.\n\n\ncaleig(t::TightBindingModel, k::Vector{\n:Real}, calegvecs::Bool=false)\n\n\n\n\nCalculate eigenvalues and eigenvectors of t. k should be provided in reduced coordinate.\n\n\nReturn\n\n\nIf calegvecs is true, \n(egvals::Vector{Float64}, egvecs::Matrix{Complex128})\n, otherwise just \negvals::Vector{Float64}\n. Eigenvectors are stored in columns and eigenvalues are sorted from small to large.\n\n\nsource\n\n\n#\n\n\nHop.addmagneticfield\n \n \nFunction\n.\n\n\naddmagneticfield(t::TightBindingModel, B::Real)--\nTightBindingModel\n\n\n\n\nAdd constant magnetic field in z direction for a TightBindingModel.\n\n\nArguments\n\n\n\n\nt::TightBindingModel\n: a TightBindingModel.\n\n\nB::Float64\n: magnetic field in z direction. B is actually Be/h, thus its unit is 1/[length]^2. e here is fundamental charge. Since electron charge is -e, positive B means -z direction for electron system.\n\n\n\n\nsource\n\n\n#\n\n\nHop.makesupercell\n \n \nFunction\n.\n\n\nmakesupercell(t::TightBindingModel, scrdlat::Matrix{Int64})--\nTightBindingModel\n\n\n\n\nCreate a supercell out of a TightBindingModel t. scrdlat is a 3x3 matrix representing supercell reduced lattice vector in columns.\n\n\nsource\n\n\n#\n\n\nHop.cutedge\n \n \nFunction\n.\n\n\ncutedge(t::TightBindingModel, dir::Int64, glueedges::Bool=false)--\nTightBindingModel\n\n\n\n\nCreate a D-1 dimensional TightBindingModel from a D dimensional one \nt\n. The finite direction is represented by \ndir\n following the convention of 1:x, 2:y, 3:z. If \nglueedges\n is true, the returned TightBindingModel will be made periodic in the \ndir\n direction.\n\n\nsource", 
            "title": "API reference"
        }, 
        {
            "location": "/#hopjl-documentation", 
            "text": "#  Hop.TightBindingModel     Type .  A tight binding model.  Generally, every tight binding model is three dimensional. Thus every lattice vector should have three components. Lower dimensional models should be simulated by vacuum layer.  Constructor Arguments   lat::Matrix{Float64} : lattice vector. Lattice vectors should be provided in columns.`  positions::Matrix{Float64} : atom positions in reduced coordinate. Atom positions should be provided in columns.`   Fields   norbits::Int : number of orbits.  lat::Matrix{Float64} : lattice vectors stored in columns.  rlat::Matrix{Float64} : reciprocal lattice vectors stored in columns.  positions::Matrix{Float64} : position of orbits in reduced coordinate stored in columns.  hoppings::Dict{Tuple{Int64,Int64,Array{Int64,1}}, Complex128} : hoppings.  Hopping example: (1, 1, [1, 0, 0]) =  1.0+0.0im indicates hopping from orbit 1  in unit cell labeled by [1, 0, 0] to orbit 1 in home unit cell is 1.0.   source  #  Hop.sethopping!     Function .  sethopping!(t::TightBindingModel, n::Int64, m::Int64, R::Vector{Int64}, hopping::Number)  Set hoppings for a TightBindingModel t. Hoppings are labeled as \u27e80n|H|Rm\u27e9, where R is a 3-element Vector{Int} representing lattice vector. Hamiltonian is guaranteed to be Hermitian.  source  #  Hop.calhamiltonian     Function .  calhamiltonian(t::TightBindingModel, k::Vector{ :Real})-- Matrix{Complex128}  Calculate Hamiltonian of a TightBindingModel t for a specific k point. k should be provided in reduced coordinate.  source  #  Hop.caleig     Function .  caleig(t::TightBindingModel, k::Vector{ :Real}, calegvecs::Bool=false)  Calculate eigenvalues and eigenvectors of t. k should be provided in reduced coordinate.  Return  If calegvecs is true,  (egvals::Vector{Float64}, egvecs::Matrix{Complex128}) , otherwise just  egvals::Vector{Float64} . Eigenvectors are stored in columns and eigenvalues are sorted from small to large.  source  #  Hop.addmagneticfield     Function .  addmagneticfield(t::TightBindingModel, B::Real)-- TightBindingModel  Add constant magnetic field in z direction for a TightBindingModel.  Arguments   t::TightBindingModel : a TightBindingModel.  B::Float64 : magnetic field in z direction. B is actually Be/h, thus its unit is 1/[length]^2. e here is fundamental charge. Since electron charge is -e, positive B means -z direction for electron system.   source  #  Hop.makesupercell     Function .  makesupercell(t::TightBindingModel, scrdlat::Matrix{Int64})-- TightBindingModel  Create a supercell out of a TightBindingModel t. scrdlat is a 3x3 matrix representing supercell reduced lattice vector in columns.  source  #  Hop.cutedge     Function .  cutedge(t::TightBindingModel, dir::Int64, glueedges::Bool=false)-- TightBindingModel  Create a D-1 dimensional TightBindingModel from a D dimensional one  t . The finite direction is represented by  dir  following the convention of 1:x, 2:y, 3:z. If  glueedges  is true, the returned TightBindingModel will be made periodic in the  dir  direction.  source", 
            "title": "Hop.jl Documentation"
        }
    ]
}