{
    "docs": [
        {
            "location": "/examples/", 
            "text": "Examples\n\n\n\n\nGraphene Bands\n\n\nusing Hop\nusing Plots\n# Lattice vector. Notice that lattice vectors are stored by column.\nlat = [1.0 0.5 0.0; 0.0 (\u221a3)/2 0.0; 0.0 0.0 1.0]\n# Reduced positions of orbits. Notice that positions are stored by column.\npositions = [1/3 2/3; 1/3 2/3; 0.0 0.0]\n\ngraphene = TightBindingModel(lat, positions)\n\nsethopping!(graphene, 1, 2, [0, 0, 0], -1.0) # \u27e81|H|(0, 0, 0)2\u27e9=-1\nsethopping!(graphene, 2, 1, [1, 0, 0], -1.0) # \u27e82|H|(1, 0, 0)1\u27e9=-1\nsethopping!(graphene, 2, 1, [0, 1, 0], -1.0) # \u27e82|H|(0, 1, 0)1\u27e9=-1\n\nkdist, egvals = calband(graphene, [1 0; 0 1; 0 0], 100)\n\nplot(kdist, egvals', label=[\n,\n], lw=2, color=:black, dpi=400,\n    xaxis=(raw\n$k$\n, font(15, \nsans-serif\n)),\n    yaxis=(\nE(eV)\n, font(15, \nsans-serif\n)),\n    xticks=[],\n    size=(400, 300)\n    )\nsavefig(\nbands.png\n)\n\n\n\n\noutput figure:", 
            "title": "Examples"
        }, 
        {
            "location": "/examples/#examples", 
            "text": "", 
            "title": "Examples"
        }, 
        {
            "location": "/examples/#graphene-bands", 
            "text": "using Hop\nusing Plots\n# Lattice vector. Notice that lattice vectors are stored by column.\nlat = [1.0 0.5 0.0; 0.0 (\u221a3)/2 0.0; 0.0 0.0 1.0]\n# Reduced positions of orbits. Notice that positions are stored by column.\npositions = [1/3 2/3; 1/3 2/3; 0.0 0.0]\n\ngraphene = TightBindingModel(lat, positions)\n\nsethopping!(graphene, 1, 2, [0, 0, 0], -1.0) # \u27e81|H|(0, 0, 0)2\u27e9=-1\nsethopping!(graphene, 2, 1, [1, 0, 0], -1.0) # \u27e82|H|(1, 0, 0)1\u27e9=-1\nsethopping!(graphene, 2, 1, [0, 1, 0], -1.0) # \u27e82|H|(0, 1, 0)1\u27e9=-1\n\nkdist, egvals = calband(graphene, [1 0; 0 1; 0 0], 100)\n\nplot(kdist, egvals', label=[ , ], lw=2, color=:black, dpi=400,\n    xaxis=(raw $k$ , font(15,  sans-serif )),\n    yaxis=( E(eV) , font(15,  sans-serif )),\n    xticks=[],\n    size=(400, 300)\n    )\nsavefig( bands.png )  output figure:", 
            "title": "Graphene Bands"
        }, 
        {
            "location": "/api/", 
            "text": "API reference\n\n\n\n\nHop\n\n\n#\n\n\nHop.TightBindingModel\n \n \nType\n.\n\n\nTightBindingModel(lat::Matrix{Float64}, positions::Matrix{Float64}; spinful::Bool=false)\n\n\n\n\nA tight binding model.\n\n\nGenerally, every tight binding model is three dimensional. Therefore, every lattice vector should have three components. Lower dimensional models should be simulated by vacuum layer.\n\n\nConstructor Arguments\n\n\n\n\nlat\n: lattice vector. Lattice vectors should be provided in columns.\n\n\npositions\n: atom positions in reduced coordinate. Atom positions should be provided in columns.\n\n\nspinful\n: false for spinless systems and true for spinful systems. If \nspinful\n is true, \nnorbits\n will be twice the number of \nsize(positions, 1)\n. Orbits are ordered as (|1\u2191\u27e9, |1\u2193\u27e9, |2\u2191\u27e9, |2\u2193\u27e9, ...).\n\n\n\n\nFields\n\n\n\n\nnorbits::Int\n: number of orbits.\n\n\nlat::Matrix{Float64}\n: lattice vectors stored in columns.\n\n\nrlat::Matrix{Float64}\n: reciprocal lattice vectors stored in columns.\n\n\npositions::Matrix{Float64}\n: position of orbits in reduced coordinate stored in columns.\n\n\nhoppings::Dict{SVector{3,Int64},Matrix{ComplexF64}}\n: hoppings stored as  R-\n\u27e80n|H|Rm\u27e9.\n\n\n\n\nsource\n\n\n#\n\n\nHop.sethopping!\n \n \nFunction\n.\n\n\nsethopping!(t::TightBindingModel, n::Int64, m::Int64, R, hopping;\n    mode::Symbol=:a)\n\n\n\n\nSet \u27e80n|H|Rm\u27e9 to \nhopping\n. \nhopping::Number\n for spinless models and \nhopping::Matrix{\n:Number}\n for spinful models. For spinful models, \nsize(hopping)\n should be (2, 2) and the basis for \nhopping\n is (|\u2191\u27e9, |\u2193\u27e9). \nmode\n has two possible values: :a for add mode and :s for set or reset mode.\n\n\nsource\n\n\n#\n\n\nHop.calhamiltonian\n \n \nFunction\n.\n\n\ncalhamiltonian(t::TightBindingModel, k::Vector{\n:Real}) --\n Matrix{ComplexF64}\n\n\n\n\nCalculate Hamiltonian of a TightBindingModel t for a specific k point. k should be provided in reduced coordinate.\n\n\nsource\n\n\n#\n\n\nHop.caleig\n \n \nFunction\n.\n\n\ncaleig(t::TightBindingModel, k::Vector{\n:Real})\n\n\n\n\nCalculate eigenvalues and eigenvectors of t. k should be provided in reduced coordinate.\n\n\nReturn\n\n\n(egvals::Vector{Float64}, egvecs::Matrix{ComplexF64})\n, Eigenvectors are stored in columns and eigenvalues are sorted from small to large.\n\n\nsource\n\n\n#\n\n\nHop.caleigvals\n \n \nFunction\n.\n\n\ncaleigvals(t::TightBindingModel, k::Vector{\n:Real})\n  --\n Vector{Float64}\n\n\n\n\nCalculate eigenvalues and eigenvectors of t. k should be provided in reduced coordinate.\n\n\nEigenvalues are sorted from small to large.\n\n\nsource\n\n\n#\n\n\nHop.calband\n \n \nFunction\n.\n\n\ncalband(t::TightBindingModel, kpath::Matrix{\n:Real}, ndiv::Int64)\n    --\n (Vector{Float64}, Matrix{Float64})\n\n\n\n\nCalculate bands. \nkpath\n is a (3, x) size matrix where x is an even number and should be provided in reduced coordinates. This function returns (\nkdist\n, \negvals\n). \nkdist\n is the distance of k points and \negvals\n is the energies of band stored in column at each k.\n\n\nsource", 
            "title": "API reference"
        }, 
        {
            "location": "/api/#api-reference", 
            "text": "", 
            "title": "API reference"
        }, 
        {
            "location": "/api/#hop", 
            "text": "#  Hop.TightBindingModel     Type .  TightBindingModel(lat::Matrix{Float64}, positions::Matrix{Float64}; spinful::Bool=false)  A tight binding model.  Generally, every tight binding model is three dimensional. Therefore, every lattice vector should have three components. Lower dimensional models should be simulated by vacuum layer.  Constructor Arguments   lat : lattice vector. Lattice vectors should be provided in columns.  positions : atom positions in reduced coordinate. Atom positions should be provided in columns.  spinful : false for spinless systems and true for spinful systems. If  spinful  is true,  norbits  will be twice the number of  size(positions, 1) . Orbits are ordered as (|1\u2191\u27e9, |1\u2193\u27e9, |2\u2191\u27e9, |2\u2193\u27e9, ...).   Fields   norbits::Int : number of orbits.  lat::Matrix{Float64} : lattice vectors stored in columns.  rlat::Matrix{Float64} : reciprocal lattice vectors stored in columns.  positions::Matrix{Float64} : position of orbits in reduced coordinate stored in columns.  hoppings::Dict{SVector{3,Int64},Matrix{ComplexF64}} : hoppings stored as  R- \u27e80n|H|Rm\u27e9.   source  #  Hop.sethopping!     Function .  sethopping!(t::TightBindingModel, n::Int64, m::Int64, R, hopping;\n    mode::Symbol=:a)  Set \u27e80n|H|Rm\u27e9 to  hopping .  hopping::Number  for spinless models and  hopping::Matrix{ :Number}  for spinful models. For spinful models,  size(hopping)  should be (2, 2) and the basis for  hopping  is (|\u2191\u27e9, |\u2193\u27e9).  mode  has two possible values: :a for add mode and :s for set or reset mode.  source  #  Hop.calhamiltonian     Function .  calhamiltonian(t::TightBindingModel, k::Vector{ :Real}) --  Matrix{ComplexF64}  Calculate Hamiltonian of a TightBindingModel t for a specific k point. k should be provided in reduced coordinate.  source  #  Hop.caleig     Function .  caleig(t::TightBindingModel, k::Vector{ :Real})  Calculate eigenvalues and eigenvectors of t. k should be provided in reduced coordinate.  Return  (egvals::Vector{Float64}, egvecs::Matrix{ComplexF64}) , Eigenvectors are stored in columns and eigenvalues are sorted from small to large.  source  #  Hop.caleigvals     Function .  caleigvals(t::TightBindingModel, k::Vector{ :Real})\n  --  Vector{Float64}  Calculate eigenvalues and eigenvectors of t. k should be provided in reduced coordinate.  Eigenvalues are sorted from small to large.  source  #  Hop.calband     Function .  calband(t::TightBindingModel, kpath::Matrix{ :Real}, ndiv::Int64)\n    --  (Vector{Float64}, Matrix{Float64})  Calculate bands.  kpath  is a (3, x) size matrix where x is an even number and should be provided in reduced coordinates. This function returns ( kdist ,  egvals ).  kdist  is the distance of k points and  egvals  is the energies of band stored in column at each k.  source", 
            "title": "Hop"
        }
    ]
}